!function(e){function t(t){for(var n,i,c=t[0],l=t[1],s=t[2],u=0,d=[];u<c.length;u++)i=c[u],Object.prototype.hasOwnProperty.call(r,i)&&r[i]&&d.push(r[i][0]),r[i]=0;for(n in l)Object.prototype.hasOwnProperty.call(l,n)&&(e[n]=l[n]);for(p&&p(t);d.length;)d.shift()();return o.push.apply(o,s||[]),a()}function a(){for(var e,t=0;t<o.length;t++){for(var a=o[t],n=!0,c=1;c<a.length;c++){var l=a[c];0!==r[l]&&(n=!1)}n&&(o.splice(t--,1),e=i(i.s=a[0]))}return e}var n={},r={0:0},o=[];function i(t){if(n[t])return n[t].exports;var a=n[t]={i:t,l:!1,exports:{}};return e[t].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=e,i.c=n,i.d=function(e,t,a){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(i.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(a,n,function(t){return e[t]}.bind(null,n));return a},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="";var c=window.webpackJsonp=window.webpackJsonp||[],l=c.push.bind(c);c.push=t,c=c.slice();for(var s=0;s<c.length;s++)t(c[s]);var p=l;o.push([265,1]),a()}({264:function(e,t,a){},265:function(e,t,a){"use strict";a.r(t);var n=a(11),r=a.n(n),o=a(117),i=a.n(o),c=a(118),l=a.n(c),s=a(75),p=a.n(s),u=a(119),d=a.n(u),g=a(120),m=a.n(g),h=a(76),f=a.n(h),b=a(0),x=a.n(b),v=a(8),y=a.n(v),E=a(315),O=a(316),w=a(310),C=a(308),j=a(305),S=a.p+"github.png",N=Object(j.a)((function(e){return{root:{backgroundColor:"#1f232a",padding:"15px"},gridItem:{transition:"transform .5s","&:hover":{transform:"scale3d(1.05, 1.05, 1)"}},paper:{textAlign:"left",color:e.palette.text.secondary,"&:hover":{}},imgContainer:{position:"relative",minHeight:"20px"},image:{background:"transparent url(".concat(S,") no-repeat scroll center center")},imageDescription:{position:"absolute",height:"25%",width:"100%",bottom:0,backgroundColor:"#000",opacity:"0.7",padding:"5px",color:"#fafafa",textAlign:"left"},charTitle:{},charSubTitle:{},charDescription:{padding:"15px",backgroundColor:"#333333",color:"#a2a0a0",fontWeight:"bold"},charDetail:r()({display:"flex",justifyContent:"space-between",padding:"10px 0 3px 0",fontSize:"0.7rem",borderBottom:"0.5px solid #564f4f"},e.breakpoints.down("xs"),{fontSize:"0.55rem"}),textAlignRight:{textAlign:"right",color:"#c5914c"}}}));function F(e){var t=N(),a=e.characters;return x.a.createElement("div",{className:t.root},x.a.createElement(C.a,{container:!0,spacing:2},a.map((function(e){var a=e.id,n=e.image,r=e.name,o=e.status,i=e.species,c=e.gender,l=e.origin;return e.visible?x.a.createElement(C.a,{item:!0,xs:6,sm:6,md:3,key:a,className:t.gridItem},x.a.createElement(w.a,{elevation:3,className:t.paper},x.a.createElement("div",{className:t.imgContainer},x.a.createElement("img",{src:n,width:"100%",height:"auto",className:t.image}),x.a.createElement("div",{className:t.imageDescription},x.a.createElement("span",null,r),x.a.createElement("span",null,"id: ".concat(a)))),x.a.createElement("div",{className:t.charDescription},x.a.createElement("div",{className:t.charDetail},x.a.createElement("span",null,"STATUS"),x.a.createElement("span",{className:t.textAlignRight},o)),x.a.createElement("div",{className:t.charDetail},x.a.createElement("span",null,"SPECIES"),x.a.createElement("span",{className:t.textAlignRight},i)),x.a.createElement("div",{className:t.charDetail},x.a.createElement("span",null,"GENDER"),x.a.createElement("span",{className:t.textAlignRight},c)),x.a.createElement("div",{className:t.charDetail,style:{border:"none"}},x.a.createElement("span",null,"ORIGIN"),x.a.createElement("span",{className:t.textAlignRight},l.name))))):null}))))}var P=a(318),k=a(321),D=a(314),T=a(322),I=a(319),A=Object(j.a)((function(){return{root:{width:"230px"},filterSection:{minHeight:"50px",marginBottom:"16px",padding:"16px","& .MuiTypography-body1":{fontSize:"14px",lineHeight:"1.2"}},filterTitle:{fontWeight:"bold",fontSize:"1.2rem",display:"block",height:"42px",textTransform:"capitalize"}}}));function z(e){var t=A(),a=e.isLoading,n=e.filters,r=e.selectedFilters,o=e.handleFilterChange;return x.a.createElement("div",{className:t.root},n.map((function(e){var n=e.name,i=e.filterItems;return x.a.createElement(w.a,{className:t.filterSection,key:n},x.a.createElement("span",{className:t.filterTitle},n),i.map((function(e){var t,i=r.includes("".concat(n,"__").concat(e));return!a&&x.a.createElement("div",{key:e,title:e},x.a.createElement(T.a,{control:x.a.createElement(I.a,{checked:i,name:e,color:"primary",onChange:function(t){o(n,e,t.target.checked)}}),label:(t=e,t.length>18?"".concat(t.substring(0,18),"..."):t)}))})))})))}var _=a(323),R=Object(j.a)((function(e){var t;return{root:(t={fontWeight:"bold",fontSize:"22px",marginBottom:"16px"},r()(t,e.breakpoints.up("lg"),{marginBottom:0}),r()(t,"& .MuiFormControl-root",{width:"200px"}),t)}}));function L(e){var t=R(),a=e.searchText,n=e.handleSearchChange;return x.a.createElement("div",{className:t.root},x.a.createElement(_.a,{id:"search-text",label:"Search By Name",value:a,onChange:n}))}var W=a(324),B=a(325),M=a(313),H=a(317),G=Object(j.a)((function(){return{root:{fontWeight:"bold",fontSize:"22px","& .MuiFormControl-root":{width:"200px"}}}}));function J(e){var t=G(),a=e.sortOrder,n=e.onSortChange;return x.a.createElement("div",{className:t.root},x.a.createElement(M.a,{className:t.formControl},x.a.createElement(W.a,{id:"demo-simple-select-label"},"Order"),x.a.createElement(H.a,{labelId:"demo-simple-select-label",id:"demo-simple-select",value:a||"asc",onChange:n},x.a.createElement(B.a,{value:"asc"},"Ascending"),x.a.createElement(B.a,{value:"desc"},"Decending"))))}var q=Object(j.a)((function(e){return{root:{},loadingSign:{textAlign:"center",width:"100%",marginTop:"50px"},bodyContainer:{display:"flex",justifyContent:"space-between",padding:"0 12px",marginTop:"80px"},searchSortFilterContainer:r()({padding:"0 0 20px 0",display:"flex",justifyContent:"space-around",flexWrap:"wrap"},e.breakpoints.up("lg"),{justifyContent:"space-between",flexWrap:"no-wrap"}),mainContainer:r()({minHeight:"700px",width:"100%"},e.breakpoints.up("lg"),{maxWidth:"1000px"}),header:{height:"50px",margin:"24px auto"},filtersContainer:{width:"200px"},paginationContainer:{padding:"20px 0",display:"flex",justifyContent:"center"},footer:{height:"200px",margin:"24px auto"}}})),U=Object(j.a)((function(){return{root:{textAlign:"center",fontWeight:"bold",fontSize:"22px"}}}));function V(e){var t=U(),a=e.message||"No Data Available";return x.a.createElement("div",{className:t.root},a)}var K=Object(j.a)({root:{position:"fixed",zIndex:10,top:0,left:0,height:"100%",width:0,transition:"0.2s",background:"#fafafa",overflow:"scroll"},closeIcon:{position:"relative",top:0,left:"12px",fontSize:"45px",textDecoration:"none",color:"#000",textAlign:"right",background:"transparent",border:"none",outline:"none"},flyItOut:{width:"260px"},childrenContainer:{padding:"12px"}}),Q=a(3),X=function(e){var t=K(),a=e.children,n=e.showFlyout,o=e.toggleFlyout;return x.a.createElement("div",{className:Object(Q.a)(t.root,r()({},t.flyItOut,n))},x.a.createElement("div",null,x.a.createElement("button",{type:"button",className:t.closeIcon,onClick:o},"Ã—")),x.a.createElement("div",{className:t.childrenContainer},a))},Y=a(121),Z=a.n(Y),$=a(122),ee=a.n($),te=a(123),ae=a.n(te),ne=a(46),re=a.n(ne),oe=a(124),ie=a.n(oe),ce="https://rickandmortyapi.com/api/character/";function le(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function se(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?le(Object(a),!0).forEach((function(t){r()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):le(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var pe=["species","gender","origin"],ue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,a="".concat(ce,"?page=").concat(t);ie.a.get(a).then((function(a){var n=a.data.results.map((function(e){return se(se({},e),{},{visible:!0})})),r=[],o=[];pe.forEach((function(e){var t={name:e,filterItems:[]};n.map((function(a){var n="origin"===e?a[e]&&a[e].name:a[e]||"";t.filterItems.includes(n)||(t.filterItems.push(n),o.push("".concat(e,"__").concat(n)))})),r.push(t)})),e({info:a.data.info,characters:n,searchedChars:re()(n),filters:r,selectedFilters:o,isLoading:!1,searchText:"",page:t})})).catch((function(){e({error:!0,isLoading:!1,info:{},characters:[],filters:[],selectedFilters:[],searchText:""})}))};function de(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function ge(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?de(Object(a),!0).forEach((function(t){r()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):de(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}var me,he=(me=function(e){var t=q(),a=e.isLoading,n=e.page,r=e.info,o=e.filters,i=e.selectedFilters,c=e.searchText,l=e.sortOrder,s=e.toggleFlyout,p=e.showFlyout,u=r.pages,d=e.handleFilterChange,g=e.onPageChange,m=e.handleSearchChange,h=e.onSortChange,f=!0;return x.a.createElement(x.a.Fragment,null,x.a.createElement(X,{showFlyout:p,toggleFlyout:s},x.a.createElement(z,{isLoading:a,filters:o,selectedFilters:i,handleFilterChange:d})),x.a.createElement("div",{className:t.bodyContainer},x.a.createElement(k.a,{smDown:!0},x.a.createElement(z,{isLoading:a,filters:o,selectedFilters:i,handleFilterChange:d})),x.a.createElement("div",{className:t.mainContainer},x.a.createElement("div",{className:t.paginationContainer},x.a.createElement(P.a,{page:n,count:u,color:"primary",onChange:g})),x.a.createElement("div",{className:t.searchSortFilterContainer},x.a.createElement(L,{handleSearchChange:m,searchText:c}),x.a.createElement(J,{onSortChange:h,sortOrder:l})),function(){var a=e.isLoading,n=e.characters,r=e.page,o=e.searchedChars;return(0===n.filter((function(e){return!0===e.visible})).length||c.length>0&&0===o.length)&&(f=!1),a?x.a.createElement("div",{className:t.loadingSign},x.a.createElement(D.a,null)):f?x.a.createElement(F,{page:r,characters:c.length>0?o:n,selectedFilters:i}):x.a.createElement(V,null)}())))},function(e){var t=Object(b.useState)({isLoading:!0,error:!1,info:{},page:1,characters:[],searchedChars:[],filters:[],selectedFilters:[],searchText:"",sortOrder:"asc"}),a=ee()(t,2),n=a[0],r=a[1];return Object(b.useEffect)((function(){ue(r,1)}),[]),Object(b.useEffect)((function(){ue(r,n.page)}),[n.page]),x.a.createElement(me,Z()({},e,n,{onPageChange:function(e,t){t!==n.page&&r(ge(ge({},n),{},{isLoading:!0,page:t}))},handleFilterChange:function(e,t,a){var o=function(e,t,a,n,r){var o=[],i=e.map((function(e){if(("origin"===t?e[t].name:e[t])===a&&(e.visible=n),!0===e.visible){var r="species__".concat(e.species),i="gender__".concat(e.gender),c="origin__".concat(e.origin.name);o.includes(r)||o.push(r),o.includes(i)||o.push(i),o.includes(c)||o.push(c)}return e})),c=i.filter((function(e){return!(!0!==e.visible||!e.name.toLowerCase().includes(r))}));return{characters:i,searchedChars:c,selectedFilters:o}}(n.characters,e,t,a,n.searchText);r(ge(ge({},n),{},{selectedFilters:o.selectedFilters,characters:o.characters,searchedChars:o.searchedChars}))},handleSearchChange:function(e){var t=re()(n.characters),a=e.target.value.trim().toLowerCase(),o=function(e,t){return{searchedChars:e.filter((function(e){return!(!0!==e.visible||!e.name.toLowerCase().includes(t))}))}}(t,a);r(ge(ge({},n),{},{searchedChars:o.searchedChars,searchText:a}))},onSortChange:function(e){var t=e.target.value,a=re()(n.characters),o=ae()(a,["name"],[t]);r(ge(ge({},n),{},{characters:o,sortOrder:t}))}}))}),fe=Object(j.a)((function(e){return{root:{},divider:{width:"100%",height:"100px",margin:"auto",opacity:"0.2"},container:{padding:"50px 12px 12px 12px",backgroundColor:"#fafafa",boxShadow:"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)"},itemContainer:{display:"flex",flexWrap:"wrap",justifyContent:"space-around"},footerItem:r()({width:"500px",boxSizing:"border-box",marginBottom:"20px",padding:"12px",textAlign:"center","& h2":{padding:"10px 0",fontSize:"0.85rem"},"& p":{letterSpacing:.75,textAlign:"justify",lineHeight:"1.5",fontSize:"0.7rem"},"& img":{width:"25px",height:"auto",paddingRight:"10px"},"& div":{display:"flex",alignItems:"center",padding:"10px 0",fontSize:"0.75rem"},"& a":{textDecoration:"none",color:"rgba(0, 0, 0, 0.87)","&:hover":{color:"purple"}},"& span":{fontWeight:"bold"}},e.breakpoints.up("lg"),{textAlign:"unset"}),note:{textAlign:"center",fontSize:"8px"}}})),be=a.p+"phone.png",xe=a.p+"mail.png";var ve=function(e){var t=fe();return x.a.createElement("div",{className:t.root},x.a.createElement("div",{className:t.divider}),x.a.createElement("div",{className:t.container},x.a.createElement("div",{className:t.itemContainer},x.a.createElement("div",{className:t.footerItem},x.a.createElement("h2",null,"About the App"),x.a.createElement("p",null,"This app was created by Hitesh Parashar to demonstrate the web development skills and to qualify for a self paced training program organized by Publicis Sapient learning team. The app was created from scratch to include only the specific features pertaining to the need of the project. The souce code and related items are available on the github account.")),x.a.createElement("div",{className:t.footerItem},x.a.createElement("h2",null,"Contact"),x.a.createElement("div",null,x.a.createElement("img",{src:xe}),x.a.createElement("span",null,"hitesh.parashar@publicissapient.com")),x.a.createElement("div",null,x.a.createElement("img",{src:be}),x.a.createElement("span",null,"9582420998")),x.a.createElement("div",null,x.a.createElement("img",{src:S}),x.a.createElement("span",null,x.a.createElement("a",{href:"https://github.com/hiteshparashar4/",target:"_blank"},"View Github profile")))))))},ye=Object(j.a)((function(e){var t;return{root:{},headerBody:(t={position:"fixed",top:0,left:0,width:"100%",zIndex:5,height:"50px",boxShadow:"0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)",padding:"12px",backgroundColor:"#000000"},r()(t,e.breakpoints.up("md"),{display:"none"}),r()(t,"& img",{width:"25px",height:"auto"}),t),icon:{}}})),Ee=a.p+"ham.png";var Oe=function(e){var t=ye(),a=e.toggleFlyout;return x.a.createElement("div",{className:t.root},x.a.createElement("div",{className:t.headerBody},x.a.createElement("span",{onClick:a,className:t.icon},x.a.createElement("img",{src:Ee}))))};a(264),a.p;function we(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function Ce(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?we(Object(a),!0).forEach((function(t){r()(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):we(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var a,n=f()(e);if(t){var r=f()(this).constructor;a=Reflect.construct(n,arguments,r)}else a=n.apply(this,arguments);return m()(this,a)}}var Se=function(e){d()(a,e);var t=je(a);function a(e){var n;return i()(this,a),(n=t.call(this,e)).toggleFlyout=n.toggleFlyout.bind(p()(n)),n.state={showFlyout:!1},n}return l()(a,[{key:"toggleFlyout",value:function(){this.setState(Ce(Ce({},this.state),{},{showFlyout:!this.state.showFlyout}))}},{key:"render",value:function(){return x.a.createElement(x.a.Fragment,null,x.a.createElement(Oe,{toggleFlyout:this.toggleFlyout}),x.a.createElement(E.a,null),x.a.createElement(O.a,{maxWidth:"lg",style:{padding:0}},x.a.createElement(he,{toggleFlyout:this.toggleFlyout,showFlyout:this.state.showFlyout})),x.a.createElement(ve,null))}}]),a}(x.a.Component),Ne=document.getElementById("container");Ne&&y.a.render(x.a.createElement(Se,null),Ne)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,